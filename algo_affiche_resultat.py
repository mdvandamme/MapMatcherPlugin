# -*- coding: utf-8 -*-

"""
/***************************************************************************
 MapMatcherPlugin
                                 A QGIS plugin
 MapMatcherPlugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-09
        copyright            : (C) 2022 by ENSG
        email                : mdvd@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Marie-Dominique Van Damme'
__date__ = '2022-07-09'
__copyright__ = '(C) 2022 by ENSG'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import csv

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.PyQt.QtGui import QColor
from qgis.core import (QgsFeatureSink,
                       QgsWkbTypes,QgsFields, QgsField,
                       QgsPointXY,
                       QgsGeometry,QgsFeature,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterCrs,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingUtils,
                       QgsMarkerSymbol,
                       QgsLineSymbol,
                       QgsRendererCategory,
                       QgsCategorizedSymbolRenderer
                       )


class AfficheResultatAlgorithm(QgsProcessingAlgorithm):

    
    def initAlgorithm(self, config):
        """
        """

        # 
        self.addParameter (
            QgsProcessingParameterFile (
                'network_topo',
                self.tr('Network topo'),
                extension = "wkt",
                defaultValue = "/home/marie-dominique/CHOUCAS/MAPMATCHER/res/network_topo.wkt"
            )
        )
         
        #
        self.addParameter (
            QgsProcessingParameterFile (
                'trace_mm',
                self.tr('Trace map matched'),
                extension = "dat",
                defaultValue = "/home/marie-dominique/CHOUCAS/MAPMATCHER/res/network_topo.wkt"
            )
        )
            
        self.addParameter (
            QgsProcessingParameterFile (
                'report_file',
                self.tr('Report file'),
                extension = "txt",
                defaultValue = "/home/marie-dominique/CHOUCAS/MAPMATCHER/res/map_matching_report.txt"
            )
        )
            
        self.addParameter(
            QgsProcessingParameterCrs(
                'projection',
                self.tr('Projection des points gps en sortie')
                )
        )
            
        # =====================================================================
         
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                'pointLayer',
                self.tr("track points")
            )
        )
            
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                'linkLayer',
                self.tr("map matching links")
            )
        )
            
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                'network',
                self.tr("track network")
            )
        )
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Création de 2 couches:
            - couche des points avec symbologie suivant le map matching
            - couche des liens d'appariement
            - couche des tronçons trouvés
        """
        
        crsDest = self.parameterAsCrs(parameters, 'projection', context)
        
        
        # ---------------------------------------------------------------------
        #   
        topolayer = self.parameterAsFile(parameters, 'network_topo', context)
        edges = {}
        with open(topolayer) as f:
            reader = csv.reader(f, delimiter=',', quoting=csv.QUOTE_ALL, quotechar='"')
            for row in reader:
                #link_id,wkt,source,target,one_way
                if row[0] != 'link_id':
                    idEdge = int(row[0])
                    wkt = str(row[1])
                    src = int(row[2])
                    tgt = int(row[3])
                    
                    if idEdge not in edges:
                        edges[idEdge] = [src,tgt,wkt]
                    
                    
                    
        
        # ---------------------------------------------------------------------
        #   Création de la couche 'track points'
        
        outFields = QgsFields()
        field1 = QgsField("id_gps", QVariant.String)
        outFields.append(field1)
        field2 = QgsField("timestamp", QVariant.String)
        outFields.append(field2)
        field3 = QgsField("mapmatched", QVariant.String)
        outFields.append(field3)
        field4 = QgsField("rmse", QVariant.Double)
        outFields.append(field4)
        
        (sink, dest_id_pl) = self.parameterAsSink(parameters, 'pointLayer',
                context, 
                outFields, 
                QgsWkbTypes.Point, 
                crsDest)
        
        # ---------------------------------------------------------------------
        #   Création de la couche 'map matching links'
        
        (sinkLink, dest_id_ll) = self.parameterAsSink(parameters, 'linkLayer',
                context, 
                QgsFields(), 
                QgsWkbTypes.LineString, 
                crsDest)
        
        # ---------------------------------------------------------------------
        #   Création de la couche 'reseau'
        
        (sinkNetwork, dest_id_nl) = self.parameterAsSink(parameters, 'network',
                context, 
                QgsFields(), 
                QgsWkbTypes.LineString, 
                crsDest)
        
        # ---------------------------------------------------------------------
        #   Remplissage des deux premières couches
        
        # Ouverture des fichiers
        datlayer = self.parameterAsFile(parameters, 'trace_mm', context)
        with open(datlayer) as f:
            reader = csv.reader(f, delimiter=',', quoting=csv.QUOTE_NONE)
            for row in reader:
                if row[1] != 'timestamp':
                    
                    createLink = False
                    
                    idTrackPoint = int(row[0])
                    tps = str(row[1])
                    rmse = float(row[6])
                    linkid = int(row[7])
                    nodeid = int(row[8])
                    
                    xrow = float(row[2])
                    yrow = float(row[3])
                    pt1 = QgsPointXY(xrow, yrow)
                    
                    xmm = float(row[4])
                    ymm = float(row[5])                    
                    pt2 = QgsPointXY(xmm, ymm)
                    
                    if linkid == -1:
                        newPoint = QgsFeature()
                        newPoint.setGeometry(QgsGeometry.fromPointXY(pt1))
                        newPoint.setAttributes([idTrackPoint, tps, 'no', rmse])
                        sink.addFeature(newPoint, QgsFeatureSink.FastInsert)
                    elif nodeid == -1:
                        newPoint = QgsFeature()
                        newPoint.setGeometry(QgsGeometry.fromPointXY(pt2))
                        newPoint.setAttributes([idTrackPoint, tps, 'edge', rmse])
                        sink.addFeature(newPoint, QgsFeatureSink.FastInsert)
                        createLink = True
                        
                        tab = edges.get(linkid)
                        newEdge = QgsFeature()
                        newEdge.setGeometry(QgsGeometry.fromWkt(tab[2]))
                        sinkNetwork.addFeature(newEdge, QgsFeatureSink.FastInsert)
                        
                    else:
                        newPoint = QgsFeature()
                        newPoint.setGeometry(QgsGeometry.fromPointXY(pt2))
                        newPoint.setAttributes([idTrackPoint, tps, 'node', rmse])
                        sink.addFeature(newPoint, QgsFeatureSink.FastInsert)
                    
                    if createLink:
                        # On construit une geometrie de type ligne
                        lineLink = QgsGeometry.fromPolylineXY([pt1, pt2])
                        newLink = QgsFeature()
                        newLink.setGeometry(lineLink)
                        sinkLink.addFeature(newLink, QgsFeatureSink.FastInsert)
                    
                        
                        
        
        # ---------------------------------------------------------------------
        #   Création de la couche ''
        
        
              
        # ---------------------------------------------------------------------
        #   Symbologie pour les points
        
        categories = []
        
        # categorie 1
        symbolEdge = QgsMarkerSymbol.createSimple({'name': 'square', 'color_border': '255,255,255'})
        symbolEdge.setColor(QColor.fromRgb(31, 120, 180))
        symbolEdge.setSize(2)
        categoryEdge = QgsRendererCategory("edge", symbolEdge, "mm")
        categories.append(categoryEdge)
        
        # categorie 2
        symbolNode = QgsMarkerSymbol.createSimple({'name': 'square', 'color_border': '255,255,255'})
        symbolNode.setColor(QColor.fromRgb(68, 174, 240))
        symbolNode.setSize(2)
        symbolNode = QgsRendererCategory("node", symbolNode, "node")
        categories.append(symbolNode)

        # categorie 3
        symbolNone = QgsMarkerSymbol.createSimple({'name': 'square', 'color_border': '255,255,255'})
        symbolNone.setColor(QColor.fromRgb(216,7,96))
        symbolNone.setSize(2)
        symbolNone = QgsRendererCategory("no", symbolNone, "--")
        categories.append(symbolNone)

        # On construit une expression pour appliquer les categories
        expression = 'mapmatched' # field name
        renderer = QgsCategorizedSymbolRenderer(expression, categories)
        trackpointLayer = QgsProcessingUtils.mapLayerFromString(dest_id_pl, context)
        trackpointLayer.setRenderer(renderer)
        
        
        # -----
        
        symbolL = QgsLineSymbol.createSimple({'penstyle':'solid', 'width':'0.6','line_style':'dash'})
        symbolL.setColor(QColor.fromRgb(255, 127, 0))
        linkLayer = QgsProcessingUtils.mapLayerFromString(dest_id_ll, context)
        linkLayer.renderer().setSymbol(symbolL)
        
        
        # -----
        
        #symbolL = QgsLineSymbol.createSimple({'penstyle':'solid', 'width':'0.6','line_style':'dash'})
        #symbolL.setColor(QColor.fromRgb(255, 127, 0))
        #linkLayer = QgsProcessingUtils.mapLayerFromString(dest_id_ll, context)
        #linkLayer.renderer().setSymbol(symbolL)
        
        
        # ---------------------------------------------------------------------
        # Retour des résultats
        #
        return {
                'pointLayer': dest_id_pl,
                'linkLayer': dest_id_ll,
                'network': dest_id_nl
            }
    
    

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Affiche résultats'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return '3-Postprocessing'

    def tr(self, string):
        return QCoreApplication.translate('3-Postprocessing', string)

    def createInstance(self):
        return AfficheResultatAlgorithm()

