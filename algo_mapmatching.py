# -*- coding: utf-8 -*-

"""
/***************************************************************************
 MapMatcherPlugin
                                 A QGIS plugin
 MapMatcherPlugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-09
        copyright            : (C) 2022 by ENSG
        email                : mdvd@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Marie-Dominique Van Damme'
__date__ = '2022-07-09'
__copyright__ = '(C) 2022 by ENSG'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterNumber,
                       QgsRunProcess,
                       QgsCoordinateReferenceSystem
                       )

from .util import javaprocess as java
from .util import parameters as param
from .util import layerstyle as style
from .util import createlayer as create


class MapMatchingAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of geometry.
        self.addParameter (
            QgsProcessingParameterFile (
                'gpslayer',
                self.tr('track Layer'),
                extension = "csv",
                defaultValue = "/home/marie-dominique/CHOUCAS/MAPMATCHER/r843.csv"
            )
        )
            
        self.addParameter (
            QgsProcessingParameterFile (
                'networklayer',
                self.tr('Network topo'),
                extension = "csv",
                defaultValue = "/home/marie-dominique/CHOUCAS/MAPMATCHER/topo_l93_2d.csv"
            )
        )
            
        self.addParameter (
            QgsProcessingParameterFile (
                'resultatpath',
                self.tr('Répertoire des résultats'),
                behavior = QgsProcessingParameterFile.Folder,
                defaultValue = "/home/marie-dominique/CHOUCAS/MAPMATCHER/res4"
            )
        )
            
        self.addParameter(
            QgsProcessingParameterNumber(
                    name='radius',
                    description=self.tr("Radius"),
                    type=QgsProcessingParameterNumber.Double,
                    defaultValue=35.0,
                    optional=False
            )
        )
            
            
        # =====================================================================
         
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                'pointLayer',
                self.tr("Sortie - track points")
            )
        )
            
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                'linkLayer',
                self.tr("Sortie - map matching links")
            )
        )
            
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                'network',
                self.tr("Sortie - track network")
            )
        )

            

    def processAlgorithm(self, parameters, context, feedback):
        """
        """
        
        # ---------------------------------------------------------------------
        # Les paramètres
        networklayer = self.parameterAsFile(parameters, 'networklayer', context)
        gpslayer = self.parameterAsFile(parameters, 'gpslayer', context)
        resultatpath = self.parameterAsFile(parameters, 'resultatpath', context)
        
        
        # ---------------------------------------------------------------------
        # Création du fichier des paramètres temporaires
        radius = self.parameterAsInt(parameters, "radius", context)
        (fp, paramfilename) = param.createParamFile(resultatpath, networklayer, gpslayer,radius)
        
        
        # ---------------------------------------------------------------------
        # Lancement du map matcher
        myRun = java.buildCommandLine(paramfilename)
        fp.close()
        QgsRunProcess.create(myRun, True)
        #process.waitForFinished(3000)
        #process.kill()
        
        # ---------------------------------------------------------------------
        # Création des couches de sortie
        crsDest = QgsCoordinateReferenceSystem(2154)
        (dest_id_pl, dest_id_ll, dest_id_nl) = create.createLayerSortie(self, 
                parameters, context, crsDest, resultatpath, gpslayer, networklayer)
        
        
        # ---------------------------------------------------------------------
        #   Symbologie pour les points
        
        style.stylePointsMM(dest_id_pl, context)
        style.styleLinkMM(dest_id_ll, context)
        
        # ---------------------------------------------------------------------
        # Retour des résultats
        #
        return {
            'pointLayer': dest_id_pl,
            'linkLayer': dest_id_ll,
            'network': dest_id_nl
        }
    
    

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Map matching d'une trace"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return '2-Processing'

    def tr(self, string):
        return QCoreApplication.translate('2-Processing', string)

    def createInstance(self):
        return MapMatchingAlgorithm()

